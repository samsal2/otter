#version 450

layout (set = 0, binding = 0) uniform UBO {
  int workflow;
  int velocity_index;
  int dye_index;
  float radius;

  vec2 point;
  vec2 padding;

  vec4 color;

  vec2 dye_dimensions;
  vec2 sim_dimensions;

  float dt;
  float dissipation;
  vec2 texel_size;
  
  vec2 dye_texel_size;
  vec2 sim_texel_size;

  float aspect_ratio;
  float decay;
  float curl;
} ubo;

/* velocity */
layout (set = 1, binding = 0, rgba32f) uniform readonly image2D source0;
/* curl */
layout (set = 2, binding = 0, rgba32f) uniform readonly image2D source1;
layout (set = 3, binding = 0, rgba32f) uniform writeonly image2D destination0;

#define bilerp(image, uv, texel_size, result)                         \
  do {                                                                \
    vec2 st_ = uv / texel_size - 0.5;                                 \
    ivec2 iuv_ = ivec2(floor(st_));                                   \
    vec2 fuv_ = fract(st_);                                           \
    vec4 a_ = imageLoad(image, (iuv_ + ivec2(0, 0)));                 \
    vec4 b_ = imageLoad(image, (iuv_ + ivec2(1, 0)));                 \
    vec4 c_ = imageLoad(image, (iuv_ + ivec2(0, 1)));                 \
    vec4 d_ = imageLoad(image, (iuv_ + ivec2(1, 1)));                 \
    result =  mix(mix(a_, b_, fuv_.x), mix(c_, d_, fuv_.x), fuv_.y);  \
  } while (false)

void main() {
  ivec2 uv_world;
  uv_world.x = int(gl_GlobalInvocationID.x + 1);
  uv_world.y = int(gl_GlobalInvocationID.y + 1);

  ivec2 vl = ivec2(uv_world.x - 1, uv_world.y);
  ivec2 vr = ivec2(uv_world.x + 1, uv_world.y);
  ivec2 vt = ivec2(uv_world.x, uv_world.y - 1);
  ivec2 vb = ivec2(uv_world.x, uv_world.y + 1);

  vec2 uv_norm = uv_world * ubo.texel_size;


  float l = imageLoad(source1, vl).x;
  float r = imageLoad(source1, vr).x;
  float t = imageLoad(source1, vt).x;
  float b = imageLoad(source1, vb).x;
  float c = imageLoad(source1, uv_world).x;

  vec2 force = 0.5 * vec2(abs(t) - abs(b), abs(r) - abs(l));
  force /= length(force) + 0.0001;
  force *= ubo.curl * c;
  force.y *= -1.0;

  vec2 velocity = imageLoad(source0, uv_world).xy;
  velocity += force * ubo.dt;
  velocity = min(max(velocity, -1000.0), 1000.0);

  imageStore(destination0, uv_world, vec4(velocity, 0.0, 1.0));
}
