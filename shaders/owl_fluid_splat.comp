#version 450

layout (set = 0, binding = 0) uniform UBO {
  int workflow;
  int velocity_index;
  int dye_index;
  float radius;

  vec2 point;
  vec2 padding;

  vec4 color;

  vec2 dye_dimensions;
  vec2 sim_dimensions;

  float dt;
  float dissipation;
  vec2 texel_size;
  
  vec2 dye_texel_size;
  vec2 sim_texel_size;

  float aspect_ratio;
  float decay;
} ubo;

layout (set = 1, binding = 0, rgba32f) uniform readonly image2D source0;
layout (set = 2, binding = 0, rgba32f) uniform readonly image2D source1;
layout (set = 3, binding = 0, rgba32f) uniform writeonly image2D destination0;

void main() {
  ivec2 uv_world;
  uv_world.x = int(gl_GlobalInvocationID.x + 1);
  uv_world.y = int(gl_GlobalInvocationID.y + 1);

  ivec2 vl = ivec2(uv_world.x - 1, uv_world.y);
  ivec2 vr = ivec2(uv_world.x + 1, uv_world.y);
  ivec2 vt = ivec2(uv_world.x, uv_world.y - 1);
  ivec2 vb = ivec2(uv_world.x, uv_world.y + 1);

  vec2 uv_norm = uv_world * ubo.texel_size;

  vec2 p = uv_norm - ubo.point;
  p.x *= ubo.aspect_ratio;
  
  vec3 splat = exp(-dot(p, p) / ubo.radius) * ubo.color.xyz;
  vec3 base = imageLoad(source0, uv_world).xyz;
  
  imageStore(destination0, uv_world, vec4(base + splat, 1.0));
}

